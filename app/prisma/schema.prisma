generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int        @id @default(autoincrement())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  phone      String?
  add_by     Int
  privilege  Int
  SuperAdmin SuperAdmin @relation(fields: [add_by], references: [id], onDelete: Cascade)
}

model Commercial {
  id          Int           @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String        @unique
  password    String
  phone       String?
  Transaction Transaction[]
}

model Decider {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
}

model Dispositive {
  id                 Int                  @id @default(autoincrement())
  type               String
  start_date         DateTime
  end_date           DateTime
  initial_state      String
  MAC                String
  state              String
  user_id            Int?
  product_id         Int
  Product            Product              @relation(fields: [product_id], references: [id], onDelete: Cascade)
  User               User?                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ProductTransaction ProductTransaction[]
}

model Helper {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
  User       User[]  @relation("UserHelpers")
}

model Maintainer {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  Dispositive      Dispositive[]
  ProductQuotation ProductQuotation[]
}

model ProductQuotation {
  quotation_id Int
  product_id   Int
  count        Int
  Product      Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Quotation    Quotation @relation(fields: [quotation_id], references: [id], onDelete: Cascade)

  @@id([quotation_id, product_id])
}

model ProductTransaction {
  id             Int         @id @default(autoincrement())
  transaction_id Int
  dispositive_id Int
  isConfirmed    Boolean     @default(false)
  Dispositive    Dispositive @relation(fields: [dispositive_id], references: [id])
  Transaction    Transaction @relation(fields: [transaction_id], references: [id])
}

model Quotation {
  id               Int                @id @default(autoincrement())
  user_id          Int
  date             DateTime
  ProductQuotation ProductQuotation[]
  User             User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model SuperAdmin {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String  @unique
  password   String
  phone      String?
  Admin      Admin[]
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  commercial_id      Int
  processed          Boolean              @default(false)
  date               DateTime
  ProductTransaction ProductTransaction[]
  Commercial         Commercial           @relation(fields: [commercial_id], references: [id], onDelete: Cascade)
  User               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  first_name  String
  last_name   String
  password    String
  phone       String?
  Dispositive Dispositive[]
  Quotation   Quotation[]
  Transaction Transaction[]
  Helper      Helper[]      @relation("UserHelpers")
}
